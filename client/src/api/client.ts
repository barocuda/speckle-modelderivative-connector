//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get speckle streams available
     * @return Success
     */
    streams(): Promise<Stream[]> {
        let url_ = this.baseUrl + "/speckle/streams";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processStreams(_response);
        });
    }

    protected processStreams(response: Response): Promise<Stream[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Stream.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Stream[]>(null as any);
    }

    /**
     * Commits speckle objects
     * @param streamId (optional) 
     * @param body (optional) 
     * @return Success
     */
    commits(streamId: string | undefined, body: Va3cObject[] | undefined): Promise<OkResult> {
        let url_ = this.baseUrl + "/speckle/commits?";
        if (streamId === null)
            throw new Error("The parameter 'streamId' cannot be null.");
        else if (streamId !== undefined)
            url_ += "streamId=" + encodeURIComponent("" + streamId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCommits(_response);
        });
    }

    protected processCommits(response: Response): Promise<OkResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OkResult.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = BadRequestResult.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = NotFoundResult.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OkResult>(null as any);
    }
}

export class Activity implements IActivity {
    totalCount?: number;
    cursor?: Date;
    items?: ActivityItem[] | null;

    constructor(data?: IActivity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"] !== undefined ? _data["totalCount"] : <any>null;
            this.cursor = _data["cursor"] ? new Date(_data["cursor"].toString()) : <any>null;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ActivityItem.fromJS(item));
            }
            else {
                this.items = <any>null;
            }
        }
    }

    static fromJS(data: any): Activity {
        data = typeof data === 'object' ? data : {};
        let result = new Activity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        data["cursor"] = this.cursor ? this.cursor.toISOString() : <any>null;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IActivity {
    totalCount?: number;
    cursor?: Date;
    items?: ActivityItem[] | null;
}

export class ActivityItem implements IActivityItem {
    actionType?: string | null;
    userId?: string | null;
    streamId?: string | null;
    resourceId?: string | null;
    resourceType?: string | null;
    time?: string | null;
    info?: Info;
    message?: string | null;

    constructor(data?: IActivityItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.actionType = _data["actionType"] !== undefined ? _data["actionType"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.streamId = _data["streamId"] !== undefined ? _data["streamId"] : <any>null;
            this.resourceId = _data["resourceId"] !== undefined ? _data["resourceId"] : <any>null;
            this.resourceType = _data["resourceType"] !== undefined ? _data["resourceType"] : <any>null;
            this.time = _data["time"] !== undefined ? _data["time"] : <any>null;
            this.info = _data["info"] ? Info.fromJS(_data["info"]) : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
        }
    }

    static fromJS(data: any): ActivityItem {
        data = typeof data === 'object' ? data : {};
        let result = new ActivityItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["actionType"] = this.actionType !== undefined ? this.actionType : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["streamId"] = this.streamId !== undefined ? this.streamId : <any>null;
        data["resourceId"] = this.resourceId !== undefined ? this.resourceId : <any>null;
        data["resourceType"] = this.resourceType !== undefined ? this.resourceType : <any>null;
        data["time"] = this.time !== undefined ? this.time : <any>null;
        data["info"] = this.info ? this.info.toJSON() : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        return data;
    }
}

export interface IActivityItem {
    actionType?: string | null;
    userId?: string | null;
    streamId?: string | null;
    resourceId?: string | null;
    resourceType?: string | null;
    time?: string | null;
    info?: Info;
    message?: string | null;
}

export class BadRequestResult implements IBadRequestResult {
    statusCode?: number;

    constructor(data?: IBadRequestResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.statusCode = _data["statusCode"] !== undefined ? _data["statusCode"] : <any>null;
        }
    }

    static fromJS(data: any): BadRequestResult {
        data = typeof data === 'object' ? data : {};
        let result = new BadRequestResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["statusCode"] = this.statusCode !== undefined ? this.statusCode : <any>null;
        return data;
    }
}

export interface IBadRequestResult {
    statusCode?: number;
}

export class Branch implements IBranch {
    id?: string | null;
    name?: string | null;
    description?: string | null;
    commits?: Commits;

    constructor(data?: IBranch) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.commits = _data["commits"] ? Commits.fromJS(_data["commits"]) : <any>null;
        }
    }

    static fromJS(data: any): Branch {
        data = typeof data === 'object' ? data : {};
        let result = new Branch();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["commits"] = this.commits ? this.commits.toJSON() : <any>null;
        return data;
    }
}

export interface IBranch {
    id?: string | null;
    name?: string | null;
    description?: string | null;
    commits?: Commits;
}

export class Branches implements IBranches {
    totalCount?: number;
    cursor?: string | null;
    items?: Branch[] | null;

    constructor(data?: IBranches) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"] !== undefined ? _data["totalCount"] : <any>null;
            this.cursor = _data["cursor"] !== undefined ? _data["cursor"] : <any>null;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(Branch.fromJS(item));
            }
            else {
                this.items = <any>null;
            }
        }
    }

    static fromJS(data: any): Branches {
        data = typeof data === 'object' ? data : {};
        let result = new Branches();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        data["cursor"] = this.cursor !== undefined ? this.cursor : <any>null;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBranches {
    totalCount?: number;
    cursor?: string | null;
    items?: Branch[] | null;
}

export class Collaborator implements ICollaborator {
    id?: string | null;
    name?: string | null;
    role?: string | null;
    avatar?: string | null;

    constructor(data?: ICollaborator) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.role = _data["role"] !== undefined ? _data["role"] : <any>null;
            this.avatar = _data["avatar"] !== undefined ? _data["avatar"] : <any>null;
        }
    }

    static fromJS(data: any): Collaborator {
        data = typeof data === 'object' ? data : {};
        let result = new Collaborator();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["role"] = this.role !== undefined ? this.role : <any>null;
        data["avatar"] = this.avatar !== undefined ? this.avatar : <any>null;
        return data;
    }
}

export interface ICollaborator {
    id?: string | null;
    name?: string | null;
    role?: string | null;
    avatar?: string | null;
}

export class Commit implements ICommit {
    id?: string | null;
    message?: string | null;
    branchName?: string | null;
    authorName?: string | null;
    authorId?: string | null;
    authorAvatar?: string | null;
    createdAt?: string | null;
    sourceApplication?: string | null;
    referencedObject?: string | null;
    totalChildrenCount?: number;
    parents?: string[] | null;

    constructor(data?: ICommit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.branchName = _data["branchName"] !== undefined ? _data["branchName"] : <any>null;
            this.authorName = _data["authorName"] !== undefined ? _data["authorName"] : <any>null;
            this.authorId = _data["authorId"] !== undefined ? _data["authorId"] : <any>null;
            this.authorAvatar = _data["authorAvatar"] !== undefined ? _data["authorAvatar"] : <any>null;
            this.createdAt = _data["createdAt"] !== undefined ? _data["createdAt"] : <any>null;
            this.sourceApplication = _data["sourceApplication"] !== undefined ? _data["sourceApplication"] : <any>null;
            this.referencedObject = _data["referencedObject"] !== undefined ? _data["referencedObject"] : <any>null;
            this.totalChildrenCount = _data["totalChildrenCount"] !== undefined ? _data["totalChildrenCount"] : <any>null;
            if (Array.isArray(_data["parents"])) {
                this.parents = [] as any;
                for (let item of _data["parents"])
                    this.parents!.push(item);
            }
            else {
                this.parents = <any>null;
            }
        }
    }

    static fromJS(data: any): Commit {
        data = typeof data === 'object' ? data : {};
        let result = new Commit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["branchName"] = this.branchName !== undefined ? this.branchName : <any>null;
        data["authorName"] = this.authorName !== undefined ? this.authorName : <any>null;
        data["authorId"] = this.authorId !== undefined ? this.authorId : <any>null;
        data["authorAvatar"] = this.authorAvatar !== undefined ? this.authorAvatar : <any>null;
        data["createdAt"] = this.createdAt !== undefined ? this.createdAt : <any>null;
        data["sourceApplication"] = this.sourceApplication !== undefined ? this.sourceApplication : <any>null;
        data["referencedObject"] = this.referencedObject !== undefined ? this.referencedObject : <any>null;
        data["totalChildrenCount"] = this.totalChildrenCount !== undefined ? this.totalChildrenCount : <any>null;
        if (Array.isArray(this.parents)) {
            data["parents"] = [];
            for (let item of this.parents)
                data["parents"].push(item);
        }
        return data;
    }
}

export interface ICommit {
    id?: string | null;
    message?: string | null;
    branchName?: string | null;
    authorName?: string | null;
    authorId?: string | null;
    authorAvatar?: string | null;
    createdAt?: string | null;
    sourceApplication?: string | null;
    referencedObject?: string | null;
    totalChildrenCount?: number;
    parents?: string[] | null;
}

export class Commits implements ICommits {
    totalCount?: number;
    cursor?: string | null;
    items?: Commit[] | null;

    constructor(data?: ICommits) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"] !== undefined ? _data["totalCount"] : <any>null;
            this.cursor = _data["cursor"] !== undefined ? _data["cursor"] : <any>null;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(Commit.fromJS(item));
            }
            else {
                this.items = <any>null;
            }
        }
    }

    static fromJS(data: any): Commits {
        data = typeof data === 'object' ? data : {};
        let result = new Commits();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        data["cursor"] = this.cursor !== undefined ? this.cursor : <any>null;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICommits {
    totalCount?: number;
    cursor?: string | null;
    items?: Commit[] | null;
}

export class Info implements IInfo {
    message?: string | null;
    sourceApplication?: string | null;
    commit?: InfoCommit;

    constructor(data?: IInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.sourceApplication = _data["sourceApplication"] !== undefined ? _data["sourceApplication"] : <any>null;
            this.commit = _data["commit"] ? InfoCommit.fromJS(_data["commit"]) : <any>null;
        }
    }

    static fromJS(data: any): Info {
        data = typeof data === 'object' ? data : {};
        let result = new Info();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["sourceApplication"] = this.sourceApplication !== undefined ? this.sourceApplication : <any>null;
        data["commit"] = this.commit ? this.commit.toJSON() : <any>null;
        return data;
    }
}

export interface IInfo {
    message?: string | null;
    sourceApplication?: string | null;
    commit?: InfoCommit;
}

export class InfoCommit implements IInfoCommit {
    message?: string | null;
    sourceApplication?: string | null;
    branchName?: string | null;

    constructor(data?: IInfoCommit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.sourceApplication = _data["sourceApplication"] !== undefined ? _data["sourceApplication"] : <any>null;
            this.branchName = _data["branchName"] !== undefined ? _data["branchName"] : <any>null;
        }
    }

    static fromJS(data: any): InfoCommit {
        data = typeof data === 'object' ? data : {};
        let result = new InfoCommit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["sourceApplication"] = this.sourceApplication !== undefined ? this.sourceApplication : <any>null;
        data["branchName"] = this.branchName !== undefined ? this.branchName : <any>null;
        return data;
    }
}

export interface IInfoCommit {
    message?: string | null;
    sourceApplication?: string | null;
    branchName?: string | null;
}

export class NotFoundResult implements INotFoundResult {
    statusCode?: number;

    constructor(data?: INotFoundResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.statusCode = _data["statusCode"] !== undefined ? _data["statusCode"] : <any>null;
        }
    }

    static fromJS(data: any): NotFoundResult {
        data = typeof data === 'object' ? data : {};
        let result = new NotFoundResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["statusCode"] = this.statusCode !== undefined ? this.statusCode : <any>null;
        return data;
    }
}

export interface INotFoundResult {
    statusCode?: number;
}

export class OkResult implements IOkResult {
    statusCode?: number;

    constructor(data?: IOkResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.statusCode = _data["statusCode"] !== undefined ? _data["statusCode"] : <any>null;
        }
    }

    static fromJS(data: any): OkResult {
        data = typeof data === 'object' ? data : {};
        let result = new OkResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["statusCode"] = this.statusCode !== undefined ? this.statusCode : <any>null;
        return data;
    }
}

export interface IOkResult {
    statusCode?: number;
}

export class SpeckleObject implements ISpeckleObject {
    id?: string | null;
    speckleType?: string | null;
    applicationId?: string | null;
    totalChildrenCount?: number;
    createdAt?: string | null;

    constructor(data?: ISpeckleObject) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.speckleType = _data["speckleType"] !== undefined ? _data["speckleType"] : <any>null;
            this.applicationId = _data["applicationId"] !== undefined ? _data["applicationId"] : <any>null;
            this.totalChildrenCount = _data["totalChildrenCount"] !== undefined ? _data["totalChildrenCount"] : <any>null;
            this.createdAt = _data["createdAt"] !== undefined ? _data["createdAt"] : <any>null;
        }
    }

    static fromJS(data: any): SpeckleObject {
        data = typeof data === 'object' ? data : {};
        let result = new SpeckleObject();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["speckleType"] = this.speckleType !== undefined ? this.speckleType : <any>null;
        data["applicationId"] = this.applicationId !== undefined ? this.applicationId : <any>null;
        data["totalChildrenCount"] = this.totalChildrenCount !== undefined ? this.totalChildrenCount : <any>null;
        data["createdAt"] = this.createdAt !== undefined ? this.createdAt : <any>null;
        return data;
    }
}

export interface ISpeckleObject {
    id?: string | null;
    speckleType?: string | null;
    applicationId?: string | null;
    totalChildrenCount?: number;
    createdAt?: string | null;
}

export class Stream implements IStream {
    id?: string | null;
    name?: string | null;
    description?: string | null;
    isPublic?: boolean;
    role?: string | null;
    createdAt?: string | null;
    updatedAt?: string | null;
    collaborators?: Collaborator[] | null;
    branches?: Branches;
    branch?: Branch;
    commit?: Commit;
    commits?: Commits;
    activity?: Activity;
    object?: SpeckleObject;

    constructor(data?: IStream) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.isPublic = _data["isPublic"] !== undefined ? _data["isPublic"] : <any>null;
            this.role = _data["role"] !== undefined ? _data["role"] : <any>null;
            this.createdAt = _data["createdAt"] !== undefined ? _data["createdAt"] : <any>null;
            this.updatedAt = _data["updatedAt"] !== undefined ? _data["updatedAt"] : <any>null;
            if (Array.isArray(_data["collaborators"])) {
                this.collaborators = [] as any;
                for (let item of _data["collaborators"])
                    this.collaborators!.push(Collaborator.fromJS(item));
            }
            else {
                this.collaborators = <any>null;
            }
            this.branches = _data["branches"] ? Branches.fromJS(_data["branches"]) : <any>null;
            this.branch = _data["branch"] ? Branch.fromJS(_data["branch"]) : <any>null;
            this.commit = _data["commit"] ? Commit.fromJS(_data["commit"]) : <any>null;
            this.commits = _data["commits"] ? Commits.fromJS(_data["commits"]) : <any>null;
            this.activity = _data["activity"] ? Activity.fromJS(_data["activity"]) : <any>null;
            this.object = _data["object"] ? SpeckleObject.fromJS(_data["object"]) : <any>null;
        }
    }

    static fromJS(data: any): Stream {
        data = typeof data === 'object' ? data : {};
        let result = new Stream();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["isPublic"] = this.isPublic !== undefined ? this.isPublic : <any>null;
        data["role"] = this.role !== undefined ? this.role : <any>null;
        data["createdAt"] = this.createdAt !== undefined ? this.createdAt : <any>null;
        data["updatedAt"] = this.updatedAt !== undefined ? this.updatedAt : <any>null;
        if (Array.isArray(this.collaborators)) {
            data["collaborators"] = [];
            for (let item of this.collaborators)
                data["collaborators"].push(item.toJSON());
        }
        data["branches"] = this.branches ? this.branches.toJSON() : <any>null;
        data["branch"] = this.branch ? this.branch.toJSON() : <any>null;
        data["commit"] = this.commit ? this.commit.toJSON() : <any>null;
        data["commits"] = this.commits ? this.commits.toJSON() : <any>null;
        data["activity"] = this.activity ? this.activity.toJSON() : <any>null;
        data["object"] = this.object ? this.object.toJSON() : <any>null;
        return data;
    }
}

export interface IStream {
    id?: string | null;
    name?: string | null;
    description?: string | null;
    isPublic?: boolean;
    role?: string | null;
    createdAt?: string | null;
    updatedAt?: string | null;
    collaborators?: Collaborator[] | null;
    branches?: Branches;
    branch?: Branch;
    commit?: Commit;
    commits?: Commits;
    activity?: Activity;
    object?: SpeckleObject;
}

export class Va3cGeometry implements IVa3cGeometry {
    uuid?: string | null;
    type?: string | null;
    data?: Va3cGeometryData;
    materials?: Va3cMaterial[] | null;

    constructor(data?: IVa3cGeometry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.uuid = _data["uuid"] !== undefined ? _data["uuid"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.data = _data["data"] ? Va3cGeometryData.fromJS(_data["data"]) : <any>null;
            if (Array.isArray(_data["materials"])) {
                this.materials = [] as any;
                for (let item of _data["materials"])
                    this.materials!.push(Va3cMaterial.fromJS(item));
            }
            else {
                this.materials = <any>null;
            }
        }
    }

    static fromJS(data: any): Va3cGeometry {
        data = typeof data === 'object' ? data : {};
        let result = new Va3cGeometry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["uuid"] = this.uuid !== undefined ? this.uuid : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        if (Array.isArray(this.materials)) {
            data["materials"] = [];
            for (let item of this.materials)
                data["materials"].push(item.toJSON());
        }
        return data;
    }
}

export interface IVa3cGeometry {
    uuid?: string | null;
    type?: string | null;
    data?: Va3cGeometryData;
    materials?: Va3cMaterial[] | null;
}

export class Va3cGeometryData implements IVa3cGeometryData {
    vertices?: number[] | null;
    normals?: number[] | null;
    colors?: number[] | null;
    uvs?: number[] | null;
    faces?: number[] | null;
    scale?: number;
    visible?: boolean;
    castShadow?: boolean;
    receiveShadow?: boolean;
    doubleSided?: boolean;

    constructor(data?: IVa3cGeometryData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["vertices"])) {
                this.vertices = [] as any;
                for (let item of _data["vertices"])
                    this.vertices!.push(item);
            }
            else {
                this.vertices = <any>null;
            }
            if (Array.isArray(_data["normals"])) {
                this.normals = [] as any;
                for (let item of _data["normals"])
                    this.normals!.push(item);
            }
            else {
                this.normals = <any>null;
            }
            if (Array.isArray(_data["colors"])) {
                this.colors = [] as any;
                for (let item of _data["colors"])
                    this.colors!.push(item);
            }
            else {
                this.colors = <any>null;
            }
            if (Array.isArray(_data["uvs"])) {
                this.uvs = [] as any;
                for (let item of _data["uvs"])
                    this.uvs!.push(item);
            }
            else {
                this.uvs = <any>null;
            }
            if (Array.isArray(_data["faces"])) {
                this.faces = [] as any;
                for (let item of _data["faces"])
                    this.faces!.push(item);
            }
            else {
                this.faces = <any>null;
            }
            this.scale = _data["scale"] !== undefined ? _data["scale"] : <any>null;
            this.visible = _data["visible"] !== undefined ? _data["visible"] : <any>null;
            this.castShadow = _data["castShadow"] !== undefined ? _data["castShadow"] : <any>null;
            this.receiveShadow = _data["receiveShadow"] !== undefined ? _data["receiveShadow"] : <any>null;
            this.doubleSided = _data["doubleSided"] !== undefined ? _data["doubleSided"] : <any>null;
        }
    }

    static fromJS(data: any): Va3cGeometryData {
        data = typeof data === 'object' ? data : {};
        let result = new Va3cGeometryData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.vertices)) {
            data["vertices"] = [];
            for (let item of this.vertices)
                data["vertices"].push(item);
        }
        if (Array.isArray(this.normals)) {
            data["normals"] = [];
            for (let item of this.normals)
                data["normals"].push(item);
        }
        if (Array.isArray(this.colors)) {
            data["colors"] = [];
            for (let item of this.colors)
                data["colors"].push(item);
        }
        if (Array.isArray(this.uvs)) {
            data["uvs"] = [];
            for (let item of this.uvs)
                data["uvs"].push(item);
        }
        if (Array.isArray(this.faces)) {
            data["faces"] = [];
            for (let item of this.faces)
                data["faces"].push(item);
        }
        data["scale"] = this.scale !== undefined ? this.scale : <any>null;
        data["visible"] = this.visible !== undefined ? this.visible : <any>null;
        data["castShadow"] = this.castShadow !== undefined ? this.castShadow : <any>null;
        data["receiveShadow"] = this.receiveShadow !== undefined ? this.receiveShadow : <any>null;
        data["doubleSided"] = this.doubleSided !== undefined ? this.doubleSided : <any>null;
        return data;
    }
}

export interface IVa3cGeometryData {
    vertices?: number[] | null;
    normals?: number[] | null;
    colors?: number[] | null;
    uvs?: number[] | null;
    faces?: number[] | null;
    scale?: number;
    visible?: boolean;
    castShadow?: boolean;
    receiveShadow?: boolean;
    doubleSided?: boolean;
}

/** Based on MeshPhongMaterial obtained by exporting a cube from the three.js editor. */
export class Va3cMaterial implements IVa3cMaterial {
    uuid?: string | null;
    name?: string | null;
    type?: string | null;
    color?: number;
    ambient?: number;
    emissive?: number;
    specular?: number;
    shininess?: number;
    opacity?: number;
    transparent?: boolean;
    wireframe?: boolean;

    constructor(data?: IVa3cMaterial) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.uuid = _data["uuid"] !== undefined ? _data["uuid"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.color = _data["color"] !== undefined ? _data["color"] : <any>null;
            this.ambient = _data["ambient"] !== undefined ? _data["ambient"] : <any>null;
            this.emissive = _data["emissive"] !== undefined ? _data["emissive"] : <any>null;
            this.specular = _data["specular"] !== undefined ? _data["specular"] : <any>null;
            this.shininess = _data["shininess"] !== undefined ? _data["shininess"] : <any>null;
            this.opacity = _data["opacity"] !== undefined ? _data["opacity"] : <any>null;
            this.transparent = _data["transparent"] !== undefined ? _data["transparent"] : <any>null;
            this.wireframe = _data["wireframe"] !== undefined ? _data["wireframe"] : <any>null;
        }
    }

    static fromJS(data: any): Va3cMaterial {
        data = typeof data === 'object' ? data : {};
        let result = new Va3cMaterial();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["uuid"] = this.uuid !== undefined ? this.uuid : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["color"] = this.color !== undefined ? this.color : <any>null;
        data["ambient"] = this.ambient !== undefined ? this.ambient : <any>null;
        data["emissive"] = this.emissive !== undefined ? this.emissive : <any>null;
        data["specular"] = this.specular !== undefined ? this.specular : <any>null;
        data["shininess"] = this.shininess !== undefined ? this.shininess : <any>null;
        data["opacity"] = this.opacity !== undefined ? this.opacity : <any>null;
        data["transparent"] = this.transparent !== undefined ? this.transparent : <any>null;
        data["wireframe"] = this.wireframe !== undefined ? this.wireframe : <any>null;
        return data;
    }
}

/** Based on MeshPhongMaterial obtained by exporting a cube from the three.js editor. */
export interface IVa3cMaterial {
    uuid?: string | null;
    name?: string | null;
    type?: string | null;
    color?: number;
    ambient?: number;
    emissive?: number;
    specular?: number;
    shininess?: number;
    opacity?: number;
    transparent?: boolean;
    wireframe?: boolean;
}

export class Va3cObject implements IVa3cObject {
    uuid?: string | null;
    name?: string | null;
    type?: string | null;
    matrix?: number[] | null;
    children?: Va3cObject[] | null;
    geometry?: Va3cGeometry;
    material?: Va3cMaterial;
    userData?: { [key: string]: string; } | null;

    constructor(data?: IVa3cObject) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.uuid = _data["uuid"] !== undefined ? _data["uuid"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            if (Array.isArray(_data["matrix"])) {
                this.matrix = [] as any;
                for (let item of _data["matrix"])
                    this.matrix!.push(item);
            }
            else {
                this.matrix = <any>null;
            }
            if (Array.isArray(_data["children"])) {
                this.children = [] as any;
                for (let item of _data["children"])
                    this.children!.push(Va3cObject.fromJS(item));
            }
            else {
                this.children = <any>null;
            }
            this.geometry = _data["geometry"] ? Va3cGeometry.fromJS(_data["geometry"]) : <any>null;
            this.material = _data["material"] ? Va3cMaterial.fromJS(_data["material"]) : <any>null;
            if (_data["userData"]) {
                this.userData = {} as any;
                for (let key in _data["userData"]) {
                    if (_data["userData"].hasOwnProperty(key))
                        (<any>this.userData)![key] = _data["userData"][key] !== undefined ? _data["userData"][key] : <any>null;
                }
            }
            else {
                this.userData = <any>null;
            }
        }
    }

    static fromJS(data: any): Va3cObject {
        data = typeof data === 'object' ? data : {};
        let result = new Va3cObject();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["uuid"] = this.uuid !== undefined ? this.uuid : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        if (Array.isArray(this.matrix)) {
            data["matrix"] = [];
            for (let item of this.matrix)
                data["matrix"].push(item);
        }
        if (Array.isArray(this.children)) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item.toJSON());
        }
        data["geometry"] = this.geometry ? this.geometry.toJSON() : <any>null;
        data["material"] = this.material ? this.material.toJSON() : <any>null;
        if (this.userData) {
            data["userData"] = {};
            for (let key in this.userData) {
                if (this.userData.hasOwnProperty(key))
                    (<any>data["userData"])[key] = this.userData[key] !== undefined ? this.userData[key] : <any>null;
            }
        }
        return data;
    }
}

export interface IVa3cObject {
    uuid?: string | null;
    name?: string | null;
    type?: string | null;
    matrix?: number[] | null;
    children?: Va3cObject[] | null;
    geometry?: Va3cGeometry;
    material?: Va3cMaterial;
    userData?: { [key: string]: string; } | null;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}