//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get speckle streams available
     * @return Success
     */
    streams(): Promise<Stream[]> {
        let url_ = this.baseUrl + "/speckle/streams";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processStreams(_response);
        });
    }

    protected processStreams(response: Response): Promise<Stream[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Stream.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Stream[]>(null as any);
    }

    /**
     * Commits speckle objects
     * @param body (optional) 
     * @return Success
     */
    commits(body: Va3cContainer | undefined): Promise<OkResult> {
        let url_ = this.baseUrl + "/speckle/commits";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCommits(_response);
        });
    }

    protected processCommits(response: Response): Promise<OkResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OkResult.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = BadRequestResult.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = NotFoundResult.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OkResult>(null as any);
    }
}

export class Activity implements IActivity {
    totalCount?: number;
    cursor?: Date;
    items?: ActivityItem[] | undefined;

    constructor(data?: IActivity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            this.cursor = _data["cursor"] ? new Date(_data["cursor"].toString()) : <any>undefined;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ActivityItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Activity {
        data = typeof data === 'object' ? data : {};
        let result = new Activity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        data["cursor"] = this.cursor ? this.cursor.toISOString() : <any>undefined;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IActivity {
    totalCount?: number;
    cursor?: Date;
    items?: ActivityItem[] | undefined;
}

export class ActivityItem implements IActivityItem {
    actionType?: string | undefined;
    userId?: string | undefined;
    streamId?: string | undefined;
    resourceId?: string | undefined;
    resourceType?: string | undefined;
    time?: string | undefined;
    info?: Info;
    message?: string | undefined;

    constructor(data?: IActivityItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.actionType = _data["actionType"];
            this.userId = _data["userId"];
            this.streamId = _data["streamId"];
            this.resourceId = _data["resourceId"];
            this.resourceType = _data["resourceType"];
            this.time = _data["time"];
            this.info = _data["info"] ? Info.fromJS(_data["info"]) : <any>undefined;
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): ActivityItem {
        data = typeof data === 'object' ? data : {};
        let result = new ActivityItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["actionType"] = this.actionType;
        data["userId"] = this.userId;
        data["streamId"] = this.streamId;
        data["resourceId"] = this.resourceId;
        data["resourceType"] = this.resourceType;
        data["time"] = this.time;
        data["info"] = this.info ? this.info.toJSON() : <any>undefined;
        data["message"] = this.message;
        return data;
    }
}

export interface IActivityItem {
    actionType?: string | undefined;
    userId?: string | undefined;
    streamId?: string | undefined;
    resourceId?: string | undefined;
    resourceType?: string | undefined;
    time?: string | undefined;
    info?: Info;
    message?: string | undefined;
}

export class BadRequestResult implements IBadRequestResult {
    statusCode?: number;

    constructor(data?: IBadRequestResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.statusCode = _data["statusCode"];
        }
    }

    static fromJS(data: any): BadRequestResult {
        data = typeof data === 'object' ? data : {};
        let result = new BadRequestResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["statusCode"] = this.statusCode;
        return data;
    }
}

export interface IBadRequestResult {
    statusCode?: number;
}

export class Branch implements IBranch {
    id?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
    commits?: Commits;

    constructor(data?: IBranch) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.commits = _data["commits"] ? Commits.fromJS(_data["commits"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Branch {
        data = typeof data === 'object' ? data : {};
        let result = new Branch();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["commits"] = this.commits ? this.commits.toJSON() : <any>undefined;
        return data;
    }
}

export interface IBranch {
    id?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
    commits?: Commits;
}

export class Branches implements IBranches {
    totalCount?: number;
    cursor?: string | undefined;
    items?: Branch[] | undefined;

    constructor(data?: IBranches) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            this.cursor = _data["cursor"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(Branch.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Branches {
        data = typeof data === 'object' ? data : {};
        let result = new Branches();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        data["cursor"] = this.cursor;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBranches {
    totalCount?: number;
    cursor?: string | undefined;
    items?: Branch[] | undefined;
}

export class Collaborator implements ICollaborator {
    id?: string | undefined;
    name?: string | undefined;
    role?: string | undefined;
    avatar?: string | undefined;

    constructor(data?: ICollaborator) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.role = _data["role"];
            this.avatar = _data["avatar"];
        }
    }

    static fromJS(data: any): Collaborator {
        data = typeof data === 'object' ? data : {};
        let result = new Collaborator();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["role"] = this.role;
        data["avatar"] = this.avatar;
        return data;
    }
}

export interface ICollaborator {
    id?: string | undefined;
    name?: string | undefined;
    role?: string | undefined;
    avatar?: string | undefined;
}

export class Commit implements ICommit {
    id?: string | undefined;
    message?: string | undefined;
    branchName?: string | undefined;
    authorName?: string | undefined;
    authorId?: string | undefined;
    authorAvatar?: string | undefined;
    createdAt?: string | undefined;
    sourceApplication?: string | undefined;
    referencedObject?: string | undefined;
    totalChildrenCount?: number;
    parents?: string[] | undefined;

    constructor(data?: ICommit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.message = _data["message"];
            this.branchName = _data["branchName"];
            this.authorName = _data["authorName"];
            this.authorId = _data["authorId"];
            this.authorAvatar = _data["authorAvatar"];
            this.createdAt = _data["createdAt"];
            this.sourceApplication = _data["sourceApplication"];
            this.referencedObject = _data["referencedObject"];
            this.totalChildrenCount = _data["totalChildrenCount"];
            if (Array.isArray(_data["parents"])) {
                this.parents = [] as any;
                for (let item of _data["parents"])
                    this.parents!.push(item);
            }
        }
    }

    static fromJS(data: any): Commit {
        data = typeof data === 'object' ? data : {};
        let result = new Commit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["message"] = this.message;
        data["branchName"] = this.branchName;
        data["authorName"] = this.authorName;
        data["authorId"] = this.authorId;
        data["authorAvatar"] = this.authorAvatar;
        data["createdAt"] = this.createdAt;
        data["sourceApplication"] = this.sourceApplication;
        data["referencedObject"] = this.referencedObject;
        data["totalChildrenCount"] = this.totalChildrenCount;
        if (Array.isArray(this.parents)) {
            data["parents"] = [];
            for (let item of this.parents)
                data["parents"].push(item);
        }
        return data;
    }
}

export interface ICommit {
    id?: string | undefined;
    message?: string | undefined;
    branchName?: string | undefined;
    authorName?: string | undefined;
    authorId?: string | undefined;
    authorAvatar?: string | undefined;
    createdAt?: string | undefined;
    sourceApplication?: string | undefined;
    referencedObject?: string | undefined;
    totalChildrenCount?: number;
    parents?: string[] | undefined;
}

export class Commits implements ICommits {
    totalCount?: number;
    cursor?: string | undefined;
    items?: Commit[] | undefined;

    constructor(data?: ICommits) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            this.cursor = _data["cursor"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(Commit.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Commits {
        data = typeof data === 'object' ? data : {};
        let result = new Commits();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        data["cursor"] = this.cursor;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICommits {
    totalCount?: number;
    cursor?: string | undefined;
    items?: Commit[] | undefined;
}

export class Info implements IInfo {
    message?: string | undefined;
    sourceApplication?: string | undefined;
    commit?: InfoCommit;

    constructor(data?: IInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            this.sourceApplication = _data["sourceApplication"];
            this.commit = _data["commit"] ? InfoCommit.fromJS(_data["commit"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Info {
        data = typeof data === 'object' ? data : {};
        let result = new Info();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        data["sourceApplication"] = this.sourceApplication;
        data["commit"] = this.commit ? this.commit.toJSON() : <any>undefined;
        return data;
    }
}

export interface IInfo {
    message?: string | undefined;
    sourceApplication?: string | undefined;
    commit?: InfoCommit;
}

export class InfoCommit implements IInfoCommit {
    message?: string | undefined;
    sourceApplication?: string | undefined;
    branchName?: string | undefined;

    constructor(data?: IInfoCommit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            this.sourceApplication = _data["sourceApplication"];
            this.branchName = _data["branchName"];
        }
    }

    static fromJS(data: any): InfoCommit {
        data = typeof data === 'object' ? data : {};
        let result = new InfoCommit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        data["sourceApplication"] = this.sourceApplication;
        data["branchName"] = this.branchName;
        return data;
    }
}

export interface IInfoCommit {
    message?: string | undefined;
    sourceApplication?: string | undefined;
    branchName?: string | undefined;
}

export class NotFoundResult implements INotFoundResult {
    statusCode?: number;

    constructor(data?: INotFoundResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.statusCode = _data["statusCode"];
        }
    }

    static fromJS(data: any): NotFoundResult {
        data = typeof data === 'object' ? data : {};
        let result = new NotFoundResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["statusCode"] = this.statusCode;
        return data;
    }
}

export interface INotFoundResult {
    statusCode?: number;
}

export class OkResult implements IOkResult {
    statusCode?: number;

    constructor(data?: IOkResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.statusCode = _data["statusCode"];
        }
    }

    static fromJS(data: any): OkResult {
        data = typeof data === 'object' ? data : {};
        let result = new OkResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["statusCode"] = this.statusCode;
        return data;
    }
}

export interface IOkResult {
    statusCode?: number;
}

export class SpeckleObject implements ISpeckleObject {
    id?: string | undefined;
    speckleType?: string | undefined;
    applicationId?: string | undefined;
    totalChildrenCount?: number;
    createdAt?: string | undefined;

    constructor(data?: ISpeckleObject) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.speckleType = _data["speckleType"];
            this.applicationId = _data["applicationId"];
            this.totalChildrenCount = _data["totalChildrenCount"];
            this.createdAt = _data["createdAt"];
        }
    }

    static fromJS(data: any): SpeckleObject {
        data = typeof data === 'object' ? data : {};
        let result = new SpeckleObject();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["speckleType"] = this.speckleType;
        data["applicationId"] = this.applicationId;
        data["totalChildrenCount"] = this.totalChildrenCount;
        data["createdAt"] = this.createdAt;
        return data;
    }
}

export interface ISpeckleObject {
    id?: string | undefined;
    speckleType?: string | undefined;
    applicationId?: string | undefined;
    totalChildrenCount?: number;
    createdAt?: string | undefined;
}

export class Stream implements IStream {
    id?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
    isPublic?: boolean;
    role?: string | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
    collaborators?: Collaborator[] | undefined;
    branches?: Branches;
    branch?: Branch;
    commit?: Commit;
    commits?: Commits;
    activity?: Activity;
    object?: SpeckleObject;

    constructor(data?: IStream) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.isPublic = _data["isPublic"];
            this.role = _data["role"];
            this.createdAt = _data["createdAt"];
            this.updatedAt = _data["updatedAt"];
            if (Array.isArray(_data["collaborators"])) {
                this.collaborators = [] as any;
                for (let item of _data["collaborators"])
                    this.collaborators!.push(Collaborator.fromJS(item));
            }
            this.branches = _data["branches"] ? Branches.fromJS(_data["branches"]) : <any>undefined;
            this.branch = _data["branch"] ? Branch.fromJS(_data["branch"]) : <any>undefined;
            this.commit = _data["commit"] ? Commit.fromJS(_data["commit"]) : <any>undefined;
            this.commits = _data["commits"] ? Commits.fromJS(_data["commits"]) : <any>undefined;
            this.activity = _data["activity"] ? Activity.fromJS(_data["activity"]) : <any>undefined;
            this.object = _data["object"] ? SpeckleObject.fromJS(_data["object"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Stream {
        data = typeof data === 'object' ? data : {};
        let result = new Stream();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["isPublic"] = this.isPublic;
        data["role"] = this.role;
        data["createdAt"] = this.createdAt;
        data["updatedAt"] = this.updatedAt;
        if (Array.isArray(this.collaborators)) {
            data["collaborators"] = [];
            for (let item of this.collaborators)
                data["collaborators"].push(item.toJSON());
        }
        data["branches"] = this.branches ? this.branches.toJSON() : <any>undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : <any>undefined;
        data["commit"] = this.commit ? this.commit.toJSON() : <any>undefined;
        data["commits"] = this.commits ? this.commits.toJSON() : <any>undefined;
        data["activity"] = this.activity ? this.activity.toJSON() : <any>undefined;
        data["object"] = this.object ? this.object.toJSON() : <any>undefined;
        return data;
    }
}

export interface IStream {
    id?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
    isPublic?: boolean;
    role?: string | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
    collaborators?: Collaborator[] | undefined;
    branches?: Branches;
    branch?: Branch;
    commit?: Commit;
    commits?: Commits;
    activity?: Activity;
    object?: SpeckleObject;
}

/** three.js object class, successor of Va3cScene. The structure and properties defined here were reverse engineered from JSON files exported by the three.js and vA3C editors. */
export class Va3cContainer implements IVa3cContainer {
    va3cObjects?: Va3cObject[] | undefined;
    streamId?: string | undefined;

    constructor(data?: IVa3cContainer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["va3cObjects"])) {
                this.va3cObjects = [] as any;
                for (let item of _data["va3cObjects"])
                    this.va3cObjects!.push(Va3cObject.fromJS(item));
            }
            this.streamId = _data["streamId"];
        }
    }

    static fromJS(data: any): Va3cContainer {
        data = typeof data === 'object' ? data : {};
        let result = new Va3cContainer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.va3cObjects)) {
            data["va3cObjects"] = [];
            for (let item of this.va3cObjects)
                data["va3cObjects"].push(item.toJSON());
        }
        data["streamId"] = this.streamId;
        return data;
    }
}

/** three.js object class, successor of Va3cScene. The structure and properties defined here were reverse engineered from JSON files exported by the three.js and vA3C editors. */
export interface IVa3cContainer {
    va3cObjects?: Va3cObject[] | undefined;
    streamId?: string | undefined;
}

export class Va3cGeometry implements IVa3cGeometry {
    uuid?: string | undefined;
    type?: string | undefined;
    data?: Va3cGeometryData;

    constructor(data?: IVa3cGeometry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.uuid = _data["uuid"];
            this.type = _data["type"];
            this.data = _data["data"] ? Va3cGeometryData.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Va3cGeometry {
        data = typeof data === 'object' ? data : {};
        let result = new Va3cGeometry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["uuid"] = this.uuid;
        data["type"] = this.type;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IVa3cGeometry {
    uuid?: string | undefined;
    type?: string | undefined;
    data?: Va3cGeometryData;
}

export class Va3cGeometryData implements IVa3cGeometryData {
    vertices?: number[] | undefined;
    colors?: number[] | undefined;
    faces?: number[] | undefined;

    constructor(data?: IVa3cGeometryData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["vertices"])) {
                this.vertices = [] as any;
                for (let item of _data["vertices"])
                    this.vertices!.push(item);
            }
            if (Array.isArray(_data["colors"])) {
                this.colors = [] as any;
                for (let item of _data["colors"])
                    this.colors!.push(item);
            }
            if (Array.isArray(_data["faces"])) {
                this.faces = [] as any;
                for (let item of _data["faces"])
                    this.faces!.push(item);
            }
        }
    }

    static fromJS(data: any): Va3cGeometryData {
        data = typeof data === 'object' ? data : {};
        let result = new Va3cGeometryData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.vertices)) {
            data["vertices"] = [];
            for (let item of this.vertices)
                data["vertices"].push(item);
        }
        if (Array.isArray(this.colors)) {
            data["colors"] = [];
            for (let item of this.colors)
                data["colors"].push(item);
        }
        if (Array.isArray(this.faces)) {
            data["faces"] = [];
            for (let item of this.faces)
                data["faces"].push(item);
        }
        return data;
    }
}

export interface IVa3cGeometryData {
    vertices?: number[] | undefined;
    colors?: number[] | undefined;
    faces?: number[] | undefined;
}

/** Based on MeshPhongMaterial obtained by exporting a cube from the three.js editor. */
export class Va3cMaterial implements IVa3cMaterial {
    uuid?: string | undefined;
    name?: string | undefined;
    type?: string | undefined;
    color?: number;
    ambient?: number;
    emissive?: number;
    specular?: number;
    shininess?: number;
    opacity?: number;
    transparent?: boolean;
    wireframe?: boolean;

    constructor(data?: IVa3cMaterial) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.uuid = _data["uuid"];
            this.name = _data["name"];
            this.type = _data["type"];
            this.color = _data["color"];
            this.ambient = _data["ambient"];
            this.emissive = _data["emissive"];
            this.specular = _data["specular"];
            this.shininess = _data["shininess"];
            this.opacity = _data["opacity"];
            this.transparent = _data["transparent"];
            this.wireframe = _data["wireframe"];
        }
    }

    static fromJS(data: any): Va3cMaterial {
        data = typeof data === 'object' ? data : {};
        let result = new Va3cMaterial();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["uuid"] = this.uuid;
        data["name"] = this.name;
        data["type"] = this.type;
        data["color"] = this.color;
        data["ambient"] = this.ambient;
        data["emissive"] = this.emissive;
        data["specular"] = this.specular;
        data["shininess"] = this.shininess;
        data["opacity"] = this.opacity;
        data["transparent"] = this.transparent;
        data["wireframe"] = this.wireframe;
        return data;
    }
}

/** Based on MeshPhongMaterial obtained by exporting a cube from the three.js editor. */
export interface IVa3cMaterial {
    uuid?: string | undefined;
    name?: string | undefined;
    type?: string | undefined;
    color?: number;
    ambient?: number;
    emissive?: number;
    specular?: number;
    shininess?: number;
    opacity?: number;
    transparent?: boolean;
    wireframe?: boolean;
}

export class Va3cMesh implements IVa3cMesh {
    uuid?: string | undefined;
    geometry?: Va3cGeometry;
    material?: Va3cMaterial;

    constructor(data?: IVa3cMesh) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.uuid = _data["uuid"];
            this.geometry = _data["geometry"] ? Va3cGeometry.fromJS(_data["geometry"]) : <any>undefined;
            this.material = _data["material"] ? Va3cMaterial.fromJS(_data["material"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Va3cMesh {
        data = typeof data === 'object' ? data : {};
        let result = new Va3cMesh();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["uuid"] = this.uuid;
        data["geometry"] = this.geometry ? this.geometry.toJSON() : <any>undefined;
        data["material"] = this.material ? this.material.toJSON() : <any>undefined;
        return data;
    }
}

export interface IVa3cMesh {
    uuid?: string | undefined;
    geometry?: Va3cGeometry;
    material?: Va3cMaterial;
}

export class Va3cObject implements IVa3cObject {
    uuid?: string | undefined;
    matrix?: number[] | undefined;
    children?: Va3cMesh[] | undefined;
    userData?: Va3cProperty[] | undefined;

    constructor(data?: IVa3cObject) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.uuid = _data["uuid"];
            if (Array.isArray(_data["matrix"])) {
                this.matrix = [] as any;
                for (let item of _data["matrix"])
                    this.matrix!.push(item);
            }
            if (Array.isArray(_data["children"])) {
                this.children = [] as any;
                for (let item of _data["children"])
                    this.children!.push(Va3cMesh.fromJS(item));
            }
            if (Array.isArray(_data["userData"])) {
                this.userData = [] as any;
                for (let item of _data["userData"])
                    this.userData!.push(Va3cProperty.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Va3cObject {
        data = typeof data === 'object' ? data : {};
        let result = new Va3cObject();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["uuid"] = this.uuid;
        if (Array.isArray(this.matrix)) {
            data["matrix"] = [];
            for (let item of this.matrix)
                data["matrix"].push(item);
        }
        if (Array.isArray(this.children)) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item.toJSON());
        }
        if (Array.isArray(this.userData)) {
            data["userData"] = [];
            for (let item of this.userData)
                data["userData"].push(item.toJSON());
        }
        return data;
    }
}

export interface IVa3cObject {
    uuid?: string | undefined;
    matrix?: number[] | undefined;
    children?: Va3cMesh[] | undefined;
    userData?: Va3cProperty[] | undefined;
}

export class Va3cProperty implements IVa3cProperty {
    name?: string | undefined;
    value?: string | undefined;
    type?: string | undefined;

    constructor(data?: IVa3cProperty) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.value = _data["value"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): Va3cProperty {
        data = typeof data === 'object' ? data : {};
        let result = new Va3cProperty();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["value"] = this.value;
        data["type"] = this.type;
        return data;
    }
}

export interface IVa3cProperty {
    name?: string | undefined;
    value?: string | undefined;
    type?: string | undefined;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}